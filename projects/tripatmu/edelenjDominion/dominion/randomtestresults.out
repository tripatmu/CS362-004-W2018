Testing Adventurer
Total Tests: 10000
Tests Passed: 0
Tests Failed: 10000
Testing Village
Total Tests: 10000
Tests Passed: 0
Tests Failed: 10000
Testing Great Hall
Total Tests: 10000
Tests Passed: 10000
Tests Failed: 0
File 'dominion.c'
Lines executed:36.36% of 649
Branches executed:37.65% of 417
Taken at least once:28.06% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1260224 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
  1260224:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
  1260224:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
   450080:   12:    return -1;
   810144:   13:  return 0;
  1260224:   14:}
        -:   15:
function newGame called 30008 returned 100% blocks executed 100%
        -:   16:struct gameState* newGame() {
    60016:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    30008:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 30008 returned 100% blocks executed 94%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    30008:   44:  SelectStream(1);
    30008:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    60016:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    30008:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   660176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
  6601760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
  5701520:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
  3000800:   65:        }
   300080:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    30008:   73:  if (numPlayers == 2)
branch  0 taken 1%
branch  1 taken 99%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        8:   76:    }
    30000:   77:  else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
    30000:   79:      state->supplyCount[curse] = 20;
    30000:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    30008:   87:  if (numPlayers == 2)
branch  0 taken 1%
branch  1 taken 99%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        8:   92:    }
        -:   93:  else
        -:   94:    {
    30000:   95:      state->supplyCount[estate] = 12;
    30000:   96:      state->supplyCount[duchy] = 12;
    30000:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    30008:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    30008:  102:  state->supplyCount[silver] = 40;
    30008:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1260336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
  9902640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
  4651240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   600160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:		{
    30008:  115:		  if (numPlayers == 2){ 
branch  0 taken 1%
branch  1 taken 99%
        8:  116:		    state->supplyCount[i] = 8; 
        8:  117:		  }
    30000:  118:		  else{ state->supplyCount[i] = 12; }
    30008:  119:		}
        -:  120:	      else
        -:  121:		{
   270072:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   300080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  4351160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  4351160:  130:	}
        -:  131:
   600160:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   240048:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
    90016:  140:      state->deckCount[i] = 0;
   720128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
   270048:  143:	  state->deck[i][j] = estate;
   270048:  144:	  state->deckCount[i]++;
   270048:  145:	}
  1440256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
   630112:  148:	  state->deck[i][j] = copper;
   630112:  149:	  state->deckCount[i]++;		
   630112:  150:	}
    90016:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   240048:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
    90016:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    90016:  160:    }
        -:  161:
        -:  162:  //draw player hands
   240048:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    90016:  166:      state->handCount[i] = 0;
    90016:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    90016:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1680448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
   810216:  178:      state->embargoTokens[i] = 0;
   810216:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    30008:  182:  state->outpostPlayed = 0;
    30008:  183:  state->phase = 0;
    30008:  184:  state->numActions = 1;
    30008:  185:  state->numBuys = 1;
    30008:  186:  state->playedCardCount = 0;
    30008:  187:  state->whoseTurn = 0;
    30008:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   360096:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
   150040:  193:    drawCard(state->whoseTurn, state);
   150040:  194:  }
        -:  195:
    30008:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    30008:  198:  return 0;
    30008:  199:}
        -:  200:
function shuffle called 90016 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    90016:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    90016:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
    90016:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1980352:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
   900160:  215:    card = floor(Random() * state->deckCount[player]);
   900160:  216:    newDeck[newDeckPos] = state->deck[player][card];
   900160:  217:    newDeckPos++;
  6001072:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
  2100376:  219:      state->deck[player][i] = state->deck[player][i+1];
  2100376:  220:    }
   900160:  221:    state->deckCount[player]--;
        -:  222:  }
  1980352:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
   900160:  224:    state->deck[player][i] = newDeck[i];
   900160:  225:    state->deckCount[player]++;
   900160:  226:  }
        -:  227:
    90016:  228:  return 0;
    90016:  229:}
        -:  230:
function playCard called 10000 returned 100% blocks executed 50%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    10000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    10000:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    10000:  243:  if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    10000:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    10000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  253:    {
    10000:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    10000:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 91%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25%
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 0%
branch  1 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
        3:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 33%
branch  1 taken 67%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        4:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 10000 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
    10000:  316:  int currentPlayer = whoseTurn(state);
    10000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 30005 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    30005:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 170049 returned 100% blocks executed 41%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   170049:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
   170049:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   170049:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   170049:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   170049:  576:    state->deckCount[player]--;
   170049:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   170049:  580:  return 0;
   170049:  581:}
        -:  582:
function getCost called 37 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       37:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 14%
branch  6 taken 3%
branch  7 taken 11%
branch  8 taken 5%
branch  9 taken 5%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 5%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        5:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       37:  644:}
        -:  645:
function cardEffect called 20004 returned 100% blocks executed 4%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    20004:  653:  int currentPlayer = whoseTurn(state);
    20004:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    20004:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    20004:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    20004:  660:  int z = 0;// this is the counter for the temp hand
    20004:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    20004:  667:  switch( card ) 
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 50%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 1%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        1:  670:		adventurerEffect(state, drawntreasure, currentPlayer, cardDrawn, z, temphand);
        1:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
    #####:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
    #####:  689:	    }
    #####:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  710:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
    #####:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
    #####:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
    #####:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
    #####:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  790:
    #####:  791:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  792:	{
    #####:  793:	  return -1;
        -:  794:	}
        -:  795:
    #####:  796:      gainCard(choice2, state, 0, currentPlayer);
        -:  797:
        -:  798:      //discard card from hand
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:      //discard trashed card
    #####:  802:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  803:	{
    #####:  804:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  805:	    {
    #####:  806:	      discardCard(i, currentPlayer, state, 0);			
    #####:  807:	      break;
        -:  808:	    }
    #####:  809:	}
        -:  810:
        -:  811:
    #####:  812:      return 0;
        -:  813:		
        -:  814:    case smithy:
        1:  815:		smithyEffect(currentPlayer, state, handPos);
        1:  816:      return 0;
        -:  817:		
        -:  818:    case village:
    10001:  819:		villageEffect(state, currentPlayer, handPos);
    10001:  820:      return 0;
        -:  821:		
        -:  822:    case baron:
    #####:  823:      state->numBuys++;//Increase buys by 1!
    #####:  824:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  825:	int p = 0;//Iterator for hand!
    #####:  826:	int card_not_discarded = 1;//Flag for discard set!
    #####:  827:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  828:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  829:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  830:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  831:	    state->discardCount[currentPlayer]++;
    #####:  832:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  833:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  834:	    }
    #####:  835:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  836:	    state->handCount[currentPlayer]--;
    #####:  837:	    card_not_discarded = 0;//Exit the loop
    #####:  838:	  }
    #####:  839:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  840:	    if(DEBUG) {
        -:  841:	      printf("No estate cards in your hand, invalid choice\n");
        -:  842:	      printf("Must gain an estate if there are any\n");
        -:  843:	    }
    #####:  844:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  845:	      gainCard(estate, state, 0, currentPlayer);
    #####:  846:	      state->supplyCount[estate]--;//Decrement estates
    #####:  847:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  848:		isGameOver(state);
    #####:  849:	      }
    #####:  850:	    }
    #####:  851:	    card_not_discarded = 0;//Exit the loop
    #####:  852:	  }
        -:  853:			    
        -:  854:	  else{
    #####:  855:	    p++;//Next card
        -:  856:	  }
        -:  857:	}
    #####:  858:      }
        -:  859:			    
        -:  860:      else{
    #####:  861:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  862:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  863:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  864:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	    isGameOver(state);
    #####:  866:	  }
    #####:  867:	}
        -:  868:      }
        -:  869:	    
        -:  870:      
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case great_hall:
    10000:  874:      great_hallEffect(state, handPos, currentPlayer);
    10000:  875:      return 0;
        -:  876:		
        -:  877:    case minion:
        -:  878:      //+1 action
    #####:  879:      state->numActions++;
        -:  880:			
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
        -:  883:			
    #####:  884:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  state->coins = state->coins + 2;
    #####:  887:	}
        -:  888:			
    #####:  889:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  890:	{
        -:  891:	  //discard hand
    #####:  892:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  893:	    {
    #####:  894:	      discardCard(handPos, currentPlayer, state, 0);
        -:  895:	    }
        -:  896:				
        -:  897:	  //draw 4
    #####:  898:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  899:	    {
    #####:  900:	      drawCard(currentPlayer, state);
    #####:  901:	    }
        -:  902:				
        -:  903:	  //other players discard hand and redraw if hand size > 4
    #####:  904:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  905:	    {
    #####:  906:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  907:		{
    #####:  908:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  909:		    {
        -:  910:		      //discard hand
    #####:  911:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  912:			{
    #####:  913:			  discardCard(handPos, i, state, 0);
        -:  914:			}
        -:  915:							
        -:  916:		      //draw 4
    #####:  917:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  918:			{
    #####:  919:			  drawCard(i, state);
    #####:  920:			}
    #####:  921:		    }
    #####:  922:		}
    #####:  923:	    }
        -:  924:				
    #####:  925:	}
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case steward:
    #####:  929:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  930:	{
        -:  931:	  //+2 cards
    #####:  932:	  drawCard(currentPlayer, state);
    #####:  933:	  drawCard(currentPlayer, state);
    #####:  934:	}
    #####:  935:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  936:	{
        -:  937:	  //+2 coins
    #####:  938:	  state->coins = state->coins + 2;
    #####:  939:	}
        -:  940:      else
        -:  941:	{
        -:  942:	  //trash 2 cards in hand
    #####:  943:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  944:	  discardCard(choice3, currentPlayer, state, 1);
        -:  945:	}
        -:  946:			
        -:  947:      //discard card from hand
    #####:  948:      discardCard(handPos, currentPlayer, state, 0);
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case tribute:
    #####:  952:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  953:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  954:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  955:	  state->deckCount[nextPlayer]--;
    #####:  956:	}
    #####:  957:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  959:	  state->discardCount[nextPlayer]--;
    #####:  960:	}
        -:  961:	else{
        -:  962:	  //No Card to Reveal
        -:  963:	  if (DEBUG){
        -:  964:	    printf("No cards to reveal\n");
        -:  965:	  }
        -:  966:	}
    #####:  967:      }
        -:  968:	    
        -:  969:      else{
    #####:  970:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  971:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  972:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  973:	    state->deckCount[nextPlayer]++;
    #####:  974:	    state->discard[nextPlayer][i] = -1;
    #####:  975:	    state->discardCount[nextPlayer]--;
    #####:  976:	  }
        -:  977:			    
    #####:  978:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  979:	} 
    #####:  980:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  981:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  982:	state->deckCount[nextPlayer]--;
    #####:  983:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  984:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  985:	state->deckCount[nextPlayer]--;
        -:  986:      }    
        -:  987:		       
    #####:  988:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  989:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  990:	state->playedCardCount++;
    #####:  991:	tributeRevealedCards[1] = -1;
    #####:  992:      }
        -:  993:
    #####:  994:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  995:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  996:	  state->coins += 2;
    #####:  997:	}
        -:  998:		    
    #####:  999:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1000:	  drawCard(currentPlayer, state);
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	}
        -: 1003:	else{//Action Card
    #####: 1004:	  state->numActions = state->numActions + 2;
        -: 1005:	}
    #####: 1006:      }
        -: 1007:	    
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case ambassador:
    #####: 1011:      j = 0;		//used to check if player has enough cards to discard
        -: 1012:
    #####: 1013:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1014:	{
    #####: 1015:	  return -1;				
        -: 1016:	}
        -: 1017:
    #####: 1018:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  return -1;
        -: 1021:	}
        -: 1022:
    #####: 1023:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1026:	    {
    #####: 1027:	      j++;
    #####: 1028:	    }
    #####: 1029:	}
    #####: 1030:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
    #####: 1032:	  return -1;				
        -: 1033:	}
        -: 1034:
        -: 1035:      if (DEBUG) 
        -: 1036:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1037:
        -: 1038:      //increase supply count for choosen card by amount being discarded
    #####: 1039:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1040:			
        -: 1041:      //each other player gains a copy of revealed card
    #####: 1042:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:	{
    #####: 1044:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1045:	    {
    #####: 1046:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1047:	    }
    #####: 1048:	}
        -: 1049:
        -: 1050:      //discard played card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1052:
        -: 1053:      //trash copies of cards returned to supply
    #####: 1054:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1055:	{
    #####: 1056:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1057:	    {
    #####: 1058:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1059:		{
    #####: 1060:		  discardCard(i, currentPlayer, state, 1);
    #####: 1061:		  break;
        -: 1062:		}
    #####: 1063:	    }
    #####: 1064:	}			
        -: 1065:
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case cutpurse:
        -: 1069:
    #####: 1070:      updateCoins(currentPlayer, state, 2);
    #####: 1071:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
    #####: 1079:		      discardCard(j, i, state, 0);
    #####: 1080:		      break;
        -: 1081:		    }
    #####: 1082:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1083:		    {
    #####: 1084:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1085:			{
        -: 1086:			  if (DEBUG)
        -: 1087:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1088:			}	
    #####: 1089:		      break;
        -: 1090:		    }		
    #####: 1091:		}
        -: 1092:					
    #####: 1093:	    }
        -: 1094:				
    #####: 1095:	}				
        -: 1096:
        -: 1097:      //discard played card from hand
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1099:
    #####: 1100:      return 0;
        -: 1101:
        -: 1102:		
        -: 1103:    case embargo: 
        -: 1104:      //+2 Coins
    #####: 1105:      state->coins = state->coins + 2;
        -: 1106:			
        -: 1107:      //see if selected pile is in play
    #####: 1108:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //add embargo token to selected supply pile
    #####: 1114:      state->embargoTokens[choice1]++;
        -: 1115:			
        -: 1116:      //trash card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case outpost:
        -: 1121:      //set outpost flag
        1: 1122:      state->outpostPlayed++;
        -: 1123:			
        -: 1124:      //discard card
        1: 1125:      discardCard(handPos, currentPlayer, state, 0);
        1: 1126:      return 0;
        -: 1127:		
        -: 1128:    case salvager:
        -: 1129:      //+1 buy
    #####: 1130:      state->numBuys++;
        -: 1131:			
    #####: 1132:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1133:	{
        -: 1134:	  //gain coins equal to trashed card
    #####: 1135:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1136:	  //trash card
    #####: 1137:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1138:	}
        -: 1139:			
        -: 1140:      //discard card
    #####: 1141:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1142:      return 0;
        -: 1143:		
        -: 1144:    case sea_hag:
    #####: 1145:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1146:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1147:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1148:	  state->discardCount[i]++;
    #####: 1149:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1150:	}
    #####: 1151:      }
    #####: 1152:      return 0;
        -: 1153:		
        -: 1154:    case treasure_map:
    #####: 1155:		return treasure_mapEffect(state, currentPlayer, handPos, index);
        -: 1156:	}
    #####: 1157:	return -1;
    20004: 1158:}
        -: 1159:
function discardCard called 20003 returned 100% blocks executed 80%
        -: 1160:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1161:{
        -: 1162:	
        -: 1163:  //if card is not trashed, added to Played pile 
    20003: 1164:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1165:    {
        -: 1166:      //add card to played pile
    20003: 1167:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    20003: 1168:      state->playedCardCount++;
    20003: 1169:    }
        -: 1170:	
        -: 1171:  //set played card to -1
    20003: 1172:  state->hand[currentPlayer][handPos] = -1;
        -: 1173:	
        -: 1174:  //remove card from player's hand
    20003: 1175:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1176:    {
        -: 1177:      //reduce number of cards in hand
    #####: 1178:      state->handCount[currentPlayer]--;
    #####: 1179:    }
    20003: 1180:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1181:    {
        -: 1182:      //reduce number of cards in hand
    #####: 1183:      state->handCount[currentPlayer]--;
    #####: 1184:    }
        -: 1185:  else 	
        -: 1186:    {
        -: 1187:      //replace discarded card with last card in hand
    20003: 1188:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1189:      //set last card to -1
    20003: 1190:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1191:      //reduce number of cards in hand
    20003: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:	
    20003: 1195:  return 0;
        -: 1196:}
        -: 1197:
function gainCard called 2 returned 100% blocks executed 72%
        -: 1198:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1199:{
        -: 1200:  //Note: supplyPos is enum of choosen card
        -: 1201:	
        -: 1202:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1203:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1204:    {
    #####: 1205:      return -1;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //added card for [whoseTurn] current player:
        -: 1209:  // toFlag = 0 : add to discard
        -: 1210:  // toFlag = 1 : add to deck
        -: 1211:  // toFlag = 2 : add to hand
        -: 1212:
        2: 1213:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1214:    {
    #####: 1215:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1216:      state->deckCount[player]++;
    #####: 1217:    }
        2: 1218:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1219:    {
    #####: 1220:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1221:      state->handCount[player]++;
    #####: 1222:    }
        -: 1223:  else
        -: 1224:    {
        2: 1225:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1226:      state->discardCount[player]++;
        -: 1227:    }
        -: 1228:	
        -: 1229:  //decrease number in supply pile
        2: 1230:  state->supplyCount[supplyPos]--;
        -: 1231:	 
        2: 1232:  return 0;
        2: 1233:}
        -: 1234:
function updateCoins called 70018 returned 100% blocks executed 100%
        -: 1235:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1236:{
        -: 1237:  int i;
        -: 1238:	
        -: 1239:  //reset coin count
    70018: 1240:  state->coins = 0;
        -: 1241:
        -: 1242:  //add coins for each Treasure card in player's hand
 30200222: 1243:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -: 1244:    {
 15030093: 1245:      if (state->hand[player][i] == copper)
branch  0 taken 1%
branch  1 taken 99%
        -: 1246:	{
    90069: 1247:	  state->coins += 1;
    90069: 1248:	}
 14940024: 1249:      else if (state->hand[player][i] == silver)
branch  0 taken 1%
branch  1 taken 99%
        -: 1250:	{
        1: 1251:	  state->coins += 2;
        1: 1252:	}
 14940023: 1253:      else if (state->hand[player][i] == gold)
branch  0 taken 1%
branch  1 taken 99%
        -: 1254:	{
        1: 1255:	  state->coins += 3;
        1: 1256:	}	
 15030093: 1257:    }	
        -: 1258:
        -: 1259:  //add bonus
    70018: 1260:  state->coins += bonus;
        -: 1261:
    70018: 1262:  return 0;
        -: 1263:}
        -: 1264:
function smithyEffect called 1 returned 100% blocks executed 100%
        -: 1265:void smithyEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1266:	//+3 Cards
        -: 1267:	int i;
        6: 1268:      for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1269:	{
        2: 1270:	  drawCard(currentPlayer, state);
        2: 1271:	}
        -: 1272:			
        -: 1273:      //discard card from hand
        1: 1274:      discardCard(handPos, currentPlayer, state, 0);
        1: 1275:}
        -: 1276:
function adventurerEffect called 1 returned 100% blocks executed 93%
        -: 1277:void adventurerEffect(struct gameState *state, int drawntreasure, int currentPlayer, int cardDrawn, int z, int *temphand){
       12: 1278:	while(drawntreasure<2){
branch  0 taken 83%
branch  1 taken 17%
        5: 1279:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####: 1280:	  shuffle(currentPlayer, state);
    #####: 1281:	}
        5: 1282:	drawCard(currentPlayer, state);
        5: 1283:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       11: 1284:	if (cardDrawn == estate || cardDrawn == duchy || cardDrawn == province)
branch  0 taken 60%
branch  1 taken 40%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        2: 1285:	  drawntreasure++;
        -: 1286:	else{
        3: 1287:	  temphand[z]=cardDrawn;
        3: 1288:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1289:	  z++;
        -: 1290:	}
        -: 1291:      }
        8: 1292:      while(z-1>=0){
branch  0 taken 75%
branch  1 taken 25%
        3: 1293:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1294:	z=z-1;
        -: 1295:	  }
        1: 1296:}
        -: 1297:
function villageEffect called 10001 returned 100% blocks executed 100%
        -: 1298:void villageEffect(struct gameState *state, int currentPlayer, int handPos){
        -: 1299:	//+1 Card
    10001: 1300:      drawCard(currentPlayer, state);
        -: 1301:			
        -: 1302:      //+2 Actions
    10001: 1303:      state->numActions = state->numActions--;
        -: 1304:			
        -: 1305:      //discard played card from hand
    10001: 1306:      discardCard(handPos, currentPlayer, state, 0);
    10001: 1307:}
        -: 1308:
function treasure_mapEffect called 0 returned 0% blocks executed 0%
        -: 1309:int treasure_mapEffect(struct gameState *state, int currentPlayer, int handPos, int index){
        -: 1310://search hand for another treasure_map
    #####: 1311:      index = 1;
        -: 1312:	  int i;
    #####: 1313:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1314:	{
    #####: 1315:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1316:	    {
    #####: 1317:	      index = i;
    #####: 1318:	      break;
        -: 1319:	    }
    #####: 1320:	}
    #####: 1321:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1322:	{
        -: 1323:	  //trash both treasure cards
    #####: 1324:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1325:	  discardCard(index, currentPlayer, state, 1);
        -: 1326:
        -: 1327:	  //gain 4 Gold cards
    #####: 1328:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1329:	    {
    #####: 1330:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1331:	    }
        -: 1332:				
        -: 1333:	  //return success
    #####: 1334:	  return 1;
        -: 1335:	}
        -: 1336:	//no second treasure_map found in hand
    #####: 1337:    return -1;
    #####: 1338:}
        -: 1339:
function great_hallEffect called 10000 returned 100% blocks executed 100%
        -: 1340:void great_hallEffect(struct gameState *state, int handPos, int currentPlayer){
        -: 1341:	//+1 Card
    10000: 1342:      drawCard(currentPlayer, state);
        -: 1343:			
        -: 1344:      //+1 Actions
    10000: 1345:      state->numActions++;
        -: 1346:			
        -: 1347:      //discard card from hand
    10000: 1348:      discardCard(handPos, currentPlayer, state, 0);
    10000: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
        -: 1353:
